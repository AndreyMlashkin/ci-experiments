name: Experiment with tags

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  experiment-run:
    runs-on: [ubuntu-latest]
    permissions:
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: 'false'
          fetch-depth: 0

      - name: Detect change type
        env:
          CHANGE_TYPE: ${{ github.event.pull_request.title }}
        shell: bash
        run: |
          echo "CHANGE_TYPE=$CHANGE_TYPE"
          echo "$CHANGE_TYPE" | grep -i major > /dev/null && echo "RELEASE_TYPE=major" >> $GITHUB_ENV && exit 0
          echo "$CHANGE_TYPE" | grep -i minor > /dev/null && echo "RELEASE_TYPE=minor" >> $GITHUB_ENV && exit 0
          echo "RELEASE_TYPE=patch" >> $GITHUB_ENV # use patch by default, if nothing is specified
      - name: Compute release number
        id: set_version
        continue-on-error: true
        run: |
          git describe --tags # git describe fails if there are no tags yet. Required to fail the step.
          LATEST_TAG=`git describe --tags | cut -d'-' -f1 | tr -d v`
          echo "LATEST_TAG=$LATEST_TAG"
          MAJOR=`echo $LATEST_TAG | cut -d'.' -f1`
          MINOR=`echo $LATEST_TAG | cut -d'.' -f2`
          PATCH=`echo $LATEST_TAG | cut -d'.' -f3`

          case $RELEASE_TYPE in

            major)
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR+1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH+1))
              ;;
            *)
              echo "Unknown release type"
              exit 1
              ;;
          esac
          echo "VERSION=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV
          echo "VERSION=$MAJOR.$MINOR.$PATCH"

      - name: Fallback set version
        id: fallback
        if: steps.set_version.outcome != 'success'
        run: |
          tag="0.0.0"
          echo "No last tag detected, try to assign $tag"
          if git rev-parse -q --verify "refs/tags/$tag" >/dev/null; then
            echo "tag $tag already exists, aborting"
            exit 1
          else
            echo "creating tag $tag"
            echo "VERSION=$tag"
            echo "VERSION=$tag" >> $GITHUB_ENV
            echo "VERSION=$tag" >> $GITHUB_OUTPUT
            echo "VERSION=$tag" > .VERSION
          fi
      - name: Write version to file
        if: steps.set_version.outcome == 'success'
        uses: brettdorrans/write-version-to-file@master
        with:
          filename: '.VERSION'
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "VERSION=$VERSION"
          echo "VERSION=$tag" >> $GITHUB_ENV
          echo "VERSION=$tag" >> $GITHUB_OUTPUT
      - name: Commit VERSION file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update VERSION file
          file_pattern: '.VERSION'
          tagging_message: ${{ steps.fallback.outputs.VERSION }}
